#!/usr/bin/env -S PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/opt/bin:${PATH}" bash

#XXX unconditionally use -F 0 aka no fuzz! because the default of 2 fuzz applied a cargo patch wrongly and yielded a compilation error! the code was in a different function!!
#TODO: add the functionality from this patch: /home/user/build/1packages/4used/pacman/1pacman-git/applyallpatches_and_patch2_functions_implement.patch
patchexeabs="/usr/bin/patch"
#patchexeabs="/var/tmp/portage/sys-devel/patch-2.7.6-r5/work/patch-2.7.6/src/patch"
#if test ! -x "/var/tmp/portage/sys-devel/patch-2.7.6-r5" -o ! -x "/var/tmp/portage/sys-devel/patch-2.7.6-r5/work" -o ! -x "/var/tmp/portage/sys-devel/patch-2.7.6-r5/work/patch-2.7.6"; then
#  sudo -- chmod a+x "/var/tmp/portage/sys-devel/patch-2.7.6-r5"{,/work,/work/patch-2.7.6}
#fi
if test -z "$patchexeabs"; then
  echo "empty \$patchexeabs" >&2
  exit 99
fi
AMBIGUOUS_ARG="--ambiguous"
THE_UNAMBIGUOUS_ARG="--unambiguous"

unambiguous=1
#^ unambiguous by default, which means, don't allow same hunk to can be applied in more than 1 place in the same file!

# Array to store the remaining arguments
remaining_args=()
at_saved=("$@")

# Iterate over the arguments
while [[ $# -gt 0 ]]; do
  case "$1" in
    "${AMBIGUOUS_ARG}")
      unambiguous=0
      #^ explicitly not checking if hunks can be applied to more than 1 place in the file.
      shift
      ;;
    "${THE_UNAMBIGUOUS_ARG}")
      unambiguous=1
      #^ explicitly checking if hunks can be applied to more than 1 place in the file.
      shift
      ;;
    *)
      # Add argument to remaining_args array
      remaining_args+=("$1")
      shift
      ;;
  esac
done

#XXX "$@" is unusable after the above "shift"(s)

if test "$unambiguous" == "0"; then
  #"${patchexeabs}" --read-only=fail --verbose --debug=65535 --fuzz=0 "$@" #last working XXX#
  "${patchexeabs}" --read-only=fail --debug=0 --fuzz=0 "${at_saved[@]}";ec="$?" #last working XXX#
  #command -p patch --read-only=fail --verbose --debug=0 --fuzz=0 "$@" #untested but should be same as before^
  #added 24 july 2020: --read-only=fail --verbose --debug=65535  #note: decided to not use --set-time OR --set-utc   at this time.
  #removed --debug=65535 on 26 july 2020
elif test "$unambiguous" == "1"; then
  #XXX: expecting to have been called like this, and the file is in current dir:
  #"${patch}" --special-call "$THE_UNAMBIGUOUS_ARG" -- "$file1basename" "$patch_file"; pec="$?"
  if test "${remaining_args[0]}" != "--special-call" -o "${remaining_args[1]}" != "--"; then
    echo "This call of 'patch' wrapper('$0') via $THE_UNAMBIGUOUS_ARG , can only handle calls via the 'diff' wrapper, but this was called with '${#at_saved[@]}' args '${at_saved[*]}'" >&2
    exit 3
  fi
  file1basename="${remaining_args[2]}"
  patch_file="${remaining_args[3]}"

  how_many_files_patched="$(grep -c '^+++' -- "$patch_file")"
  if test "$how_many_files_patched" -gt "1"; then
    #worksTODO: unsure if $0 works here? wasn't $@ obliterated above?
    #FIXME: obviously, needs to support this with --unambiguous too! but for now just wanna see how the hunks get processed for 1 patched file, without the extra complexity of handling more files.
    echo "'patch' wrapper cmd('$0') has detected more than 1 file being patched, to support that pass arg $AMBIGUOUS_ARG which won't check if the same hunk can be applied more than once in the same file." >&2
    exit 13
  fi
  if test ! -e "$file1basename"; then
    echo "filename '$file1basename' wasn't found in pwd=$(pwd)" >&2
    exit 5
  fi
  if test ! -e "$patch_file"; then
    echo "patch file '$patch_file' wasn't found in pwd=$(pwd)" >&2
    exit 6
  fi
  echo "patch wrapper found file1basename='$file1basename' and patch_file='$patch_file'" >&2
  exit 4 #FIXME
  #here we must test if each hunk of the patch applies successfully more than once, which means, it can apply to more than 1 unique spot in the file!
  #worksanywayTODO: ensure somehow, that the hunk doesn't create another spot for itself to apply in? well, the patch will fail properly if it does.
  #TODO: set ec="$?"
else
  echo "Bad coding in '$0'" >&2
  ec="100"
fi

exit "$ec"

#TODO: 23 march 2022, I must detect dangling hunks, ie. hunks that are separated by anything other than comments (eg. new line(s)) because 'patch' will ignore them and treat them as comments, atually the whole file to patch is considered done at that point, and the next hunks if any are ignored as comments! silently!


#XXX TODO FIXME: can't use patch2 here because it expects strip 1 and assumes -N instead of -R and expects a patch file, instead of allowing "$@" so must find another way, to can use this in general! like for example use it only for emerge patching, which would imply -N and maybe strip 1 and expect the patch file; but globally can't really use this
#
##src: from my pacman version and currently residing in 0500_applyallpatches_and_patch2_functions_implement.patch
#patch2() {
#  # this will set the timestamp(atime+mtime) of all patched files to the same one that the patch file itself has!
#  #set -v
#  #set +e
#  local fil="${1}"
#  shift 1
#  if test -z "$fil"; then
#    echo "!! patch2() inner pacman function called without any args, expected only the patch file as first arg!" >&2
#    return 1
#  fi
#  if test "$#" -gt "0"; then
#    echo "!! patch2() inner pacman function called with more than one args, expected only the patch file as first arg!" >&2
#    return 1
#  fi
#  if ! test -f "$fil"; then
#    echo "!! patch file '$fil' doesn't exist as a regular file?!" >&2
#    return 2
#  fi
#  if ! test -r "$fil"; then
#    echo "!! patch file '$fil' exists but isn't readable by me!" >&2
#    return 3
#  fi
#  #patch "$@" "$fil"; local ec="$?"
#  #XXX: if you change --strip value of 1 to something else, you've to modify the below 'sed' too!
#  #"${patchexeabs}" -F0 -N --strip=1 -i "$fil"; local ec="$?"
#  "${patchexeabs}" --read-only=fail --debug=0 --fuzz=0 -N --strip=1 -i "$fil"; local ec="$?"
#  if test "0$ec" != "00"; then
#    echo "!! patch2 failed(ec=$ec) to apply patch file '$fil' !" >&2
#    return 7
#  fi
#  local atime
#  atime="$(stat --dereference --printf=%X -- "$fil")"
#  if test -z "$atime"; then
#    echo "!! failed to get patch file '$fil' 's atime!" >&2
#    return 4
#  fi
#  local mtime
#  mtime="$(stat --dereference --printf=%Y -- "$fil")"
#  if test -z "$mtime"; then
#    echo "!! failed to get patch file '$fil' 's mtime!" >&2
#    return 5
#  fi
#  local allfilespatched
#  # shellcheck disable=SC2207
#  allfilespatched=( $(cat -- "$fil" |
#    #grep -F '+++ '|cut -f2- -d' '|sed -e 's/^b\///' #no good
#    #grep '^+++ '|cut -f1 -d$'\t'|sed -e 's/^+++ b\///' #no good for: +++ patched/modules/gui/qt/util/input_slider.cpp
#    grep '^+++ '|cut -f1 -d$'\t' |sed -re 's/^\+\+\+ [^/]*\///; s/\r//g' #hardcoded --strip=1 behavior!
#      ) )
#  for thefile in "${allfilespatched[@]}"; do
#    if test -w "$thefile"; then  #file is writable by me, else how would've 'patch' succeeded patching it?!
#      #set -e
#      #eval "$(retouch "$fil" |tail -n1)"
#      #set +e
#      touch "--date=@$atime" --no-dereference --time=atime -- "$thefile"; ec="$?"
#      if test "0$ec" != "00"; then
#        echo "!! patch2's touch portion failed(ec=$ec) to set atime for patched file '$thefile' to the same atime as patch file '$fil' !" >&2
#        return 8
#      fi
#      check_atime="$(stat --dereference --printf=%X -- "$thefile")"
#      if test "$atime" != "$check_atime"; then
#        echo "!! patch2's touch portion failed to set properly set atime($atime) for patched file '$thefile' to the same atime as patch file '$fil' ! It set it to '$check_atime' instead!" >&2
#        return 10
#      fi
#      touch "--date=@$mtime" --no-dereference --time=mtime -- "$thefile"; ec="$?"
#      if test "0$ec" != "00"; then
#        echo "!! patch2's touch portion failed(ec=$ec) to set mtime for patched file '$thefile' to the same mtime as patch file '$fil' !" >&2
#        return 9
#      fi
#      check_mtime="$(stat --dereference --printf=%Y -- "$thefile")"
#      if test "$mtime" != "$check_mtime"; then
#        echo "!! patch2's touch portion failed to set properly set mtime($mtime) for patched file '$thefile' to the same mtime as patch file '$fil' ! It set it to '$check_mtime' instead!" >&2
#        return 11
#      fi
#    else
#      if test "$thefile" == "dev/null" -o "$thefile" == "/dev/null"; then
#        echo "!! ignoring '$thefile'(ie. some file got removed/deleted) from patch '$fil'" >&2
#      else
#        echo "!! the patched file '$thefile' doesn't exist while read from patch '$fil' ! (this might require fixing the code within pacman's patch2() function in scripts/libmakepkg/util/message.sh.in)" >&2
#        return 6
#      fi
#    fi
#  done
#  return 0 #all good, nonzero is bad! this just works with return due to set -e being in effect during the execution of these, so a non-zero return will fail the whole makepkg/pacman execution
#  #set +v
#  #set -e
#
##close but not perfect(those .000000000 is obvious sign the granularity is the second(s)):
##$ stat src/bootstrap/tool.rs ../tools_are_never_optional.patch
##  File: src/bootstrap/tool.rs
##  Size: 24296     	Blocks: 48         IO Block: 4096   regular file
##Device: 15h/21d	Inode: 18461055    Links: 1
##Access: (0644/-rw-r--r--)  Uid: ( 1000/    user)   Gid: ( 1000/    user)
##Access: 2019-06-16 14:46:32.000000000 +0200
##Modify: 2019-06-16 14:46:32.000000000 +0200
##Change: 2019-06-17 11:50:30.474906740 +0200
## Birth: 2019-06-17 11:50:30.466906740 +0200
##  File: ../tools_are_never_optional.patch
##  Size: 817       	Blocks: 8          IO Block: 4096   regular file
##Device: 15h/21d	Inode: 18264632    Links: 1
##Access: (0644/-rw-r--r--)  Uid: ( 1000/    user)   Gid: ( 1000/    user)
##Access: 2019-06-16 14:46:32.700963386 +0200
##Modify: 2019-06-16 14:46:32.700963386 +0200
##Change: 2019-06-16 14:46:32.711963386 +0200
## Birth: 2019-06-16 14:46:32.700963386 +0200
#
#}
#
