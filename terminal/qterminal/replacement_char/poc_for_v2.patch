diff --git a/CMakeLists.txt b/CMakeLists.txt
index 9cf3516..3533c86 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -153,6 +153,7 @@ set_target_properties( ${QTERMWIDGET_LIBRARY_NAME} PROPERTIES
                        VERSION ${QTERMWIDGET_VERSION}
                      )
 
+set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fexceptions")
 
 if(APPLE)
     target_compile_definitions(${QTERMWIDGET_LIBRARY_NAME}
diff --git a/lib/Emulation.cpp b/lib/Emulation.cpp
index c88ac12..ed9c7f1 100644
--- a/lib/Emulation.cpp
+++ b/lib/Emulation.cpp
@@ -25,6 +25,7 @@
 // System
 #include <cstdio>
 #include <cstdlib>
+#include <cstring> // for memcpy
 #include <unistd.h>
 #include <string>
 
@@ -208,6 +209,23 @@ void Emulation::sendMouseEvent(int /*buttons*/, int /*column*/, int /*row*/, int
     // default implementation does nothing
 }
 
+int countReplacementCharactersInText(const char* text, int length) {
+    int count = 0;
+    for (int i = 0; i < length - 2; ++i) {
+        if (static_cast<unsigned char>(text[i]) == 0xEF &&
+            static_cast<unsigned char>(text[i + 1]) == 0xBF &&
+            static_cast<unsigned char>(text[i + 2]) == 0xBD) {
+            count++;
+            i += 2; // Skip the next two bytes
+        }
+    }
+    return count;
+}
+
+int countReplacementCharactersInString(const QString& str) {
+    return str.count(QChar::ReplacementCharacter);
+}
+
 /*
    We are doing code conversion from locale to unicode first.
 TODO: Character composition from the old code.  See #96536
@@ -219,14 +237,105 @@ void Emulation::receiveData(const char* text, int length)
 
     bufferedUpdate();
 
-    /* XXX: the following code involves encoding & decoding of "UTF-16
-     * surrogate pairs", which does not work with characters higher than
-     * U+10FFFF
-     * https://unicodebook.readthedocs.io/unicode_encodings.html#surrogates
-     */
+//    /* XXX: the following code involves encoding & decoding of "UTF-16
+//     * surrogate pairs", which does not work with characters higher than
+//     * U+10FFFF
+//     * https://unicodebook.readthedocs.io/unicode_encodings.html#surrogates
+//     */
+//    qDebug() << "!!!!!!!!!! length:" << length;
+//    qDebug() << "!!!!!!!!!! text:" << text;
+//    QString str = QString::fromUtf8(text, length);
+//    //QString str = fromUtf8(text, length);
+//    qDebug() << "!!!!!!!!!! str:" << str;
+//    auto encoded = _fromUtf8(str);
+//    qDebug() << "!!!!!!!!!! encoded:" << encoded;
+//    std::wstring unicodeText = encoded.data.toStdWString();
+//    qDebug() << "!!!!!!!!!! unicodeText:" << QString::fromStdWString(unicodeText.c_str());
+////    if (length >= 3 &&
+////        (
+////         /*(str[length - 3] == '\xEF' &&
+////        str[length - 2] == '\xBF' &&
+////        str[length - 1] == '\xBD')
+////         ||*/
+////         //(str[0]=='\xEF' && str[1]=='\xBF' && str[2]=='\xBD'))
+////    //str.contains(QChar::ReplacementCharacter))
+////    str[0]==QChar::ReplacementCharacter)
+////        ) {
+////
+////        qDebug() << "Replacement character detected at the front of the input.";
+////        throw std::runtime_error("Replacement character detected at the front of the input. Crashing as requested.");
+////        // Option 2: Crash the program using assertion
+////        Q_ASSERT(false); // This will crash the program with a debug assertion
+////    }
+//    // Count replacement characters in 'text'
+//    int textReplacementCount = countReplacementCharactersInText(text, length);
+//    // Count replacement characters in 'str'
+//    int strReplacementCount = countReplacementCharactersInString(str);
+//
+//    // Compare the counts
+//    if (strReplacementCount > textReplacementCount) {
+//        qDebug() << "More replacement characters found in 'str' than in 'text'.";
+//        throw std::runtime_error("Something got replaced with replacement character. Crashing as requested.");
+//        Q_ASSERT(false);//not reached
+//    }
+    qDebug() << "!!!!!!!!!! length:" << length;
+    qDebug() << "!!!!!!!!!! text:" << text; //yes replacement chars here because it get converted to utf8
     QString str = QString::fromUtf8(text, length);
-    auto encoded = _fromUtf8(str);
-    std::wstring unicodeText = encoded.data.toStdWString(); 
+    qDebug() << "!!!!!!!!!! str:" << str; //yes replacement chars here
+    // Count replacement characters in 'text'
+    int textReplacementCount = countReplacementCharactersInText(text, length);
+    // Count replacement characters in 'str'
+    int strReplacementCount = countReplacementCharactersInString(str);
+
+    //char combinedBuffer[3 + length];
+    //std::vector<char> combinedBuffer(_last_max_three_bytes_of_text.size() + length);
+
+    // do we have any new invalid utf8 bytes at the end of this new chunk?
+    int the_diff=strReplacementCount-textReplacementCount;
+    qDebug() << "!!!!!!!!!! the_diff:" << the_diff;
+    qDebug() << "!!!!!!!!!! _how_many_of_last_max_three_are_in:" << _how_many_of_last_max_three_are_in;
+
+
+
+    std::vector<uint8_t> combinedBuffer(_how_many_of_last_max_three_are_in + length);
+    //"allocates memory on the heap, but it is automatically deallocated when the vector goes out of scope, such as when the function exits"
+    int combinedLength = 0;
+    if (_how_many_of_last_max_three_are_in > 0) {
+        //copy last state bytes from the end of a prev. chunk which woulda been invalid utf8
+        //copy to the beginning of this new chunk
+        std::memcpy(combinedBuffer.data(), _last_max_three_bytes_of_text.data(), _how_many_of_last_max_three_are_in);
+        combinedLength+=_how_many_of_last_max_three_are_in;
+    }
+
+    // Compare the counts
+    if (the_diff>0) {
+        qDebug() << "!!!!!!!!!! More replacement characters("<<the_diff<<") found in 'str' than in 'text'.";
+        //throw std::runtime_error("Something got replaced with replacement character. Crashing as requested.");
+    }
+
+    // Copy new text to the combined buffer
+    // but not any invalid utf8 bytes from the end, if any.
+    std::memcpy(combinedBuffer.data() + combinedLength, text, length-the_diff);
+    combinedLength += length-the_diff;
+
+    // Try to convert the combined buffer to UTF-8
+    QString str2 = QString::fromUtf8(reinterpret_cast<const char*>(combinedBuffer.data()), combinedLength);
+    qDebug() << "!!!!!!!!!! resultAftermods:" << str2;
+    auto encoded = _fromUtf8(str2);
+    qDebug() << "!!!!!!!!!! encoded:" << encoded;
+    std::wstring unicodeText = encoded.data.toStdWString();
+    qDebug() << "!!!!!!!!!! unicodeText:" << QString::fromStdWString(unicodeText.c_str());
+//    //QString utf16Text = _decoder->toUnicode(text,length-the_diff);
+//    QString utf16Text = _decoder->toUnicode(reinterpret_cast<const char*>(combinedBuffer.data()),combinedLength);
+//    qDebug() << "!!!!!!!!!! utf16Text:" << utf16Text;
+
+    // Store the last up to 3 bytes of invalid UTF-8 from the end of the text
+    if (the_diff > 0) {
+        _how_many_of_last_max_three_are_in = the_diff;
+        std::memcpy(_last_max_three_bytes_of_text.data(), text + length - the_diff, the_diff);
+    } else {
+        _how_many_of_last_max_three_are_in = 0;
+    }
 
     //send characters to terminal emulator
     for (size_t i=0;i<unicodeText.length();i++)
diff --git a/lib/Emulation.h b/lib/Emulation.h
index 98ba2fe..27edaaf 100644
--- a/lib/Emulation.h
+++ b/lib/Emulation.h
@@ -470,6 +470,8 @@ protected:
 
 
   const KeyboardTranslator* _keyTranslator; // the keyboard layout
+  std::array<uint8_t, 3> _last_max_three_bytes_of_text = {0};
+  int _how_many_of_last_max_three_are_in = 0;
 
 protected slots:
   /**
