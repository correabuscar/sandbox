patch
for https://github.com/pdoms/SHA256-PYTHON.git
on commit: 93b4a968cfb93a18a3ae742ff6cae94a2578bbd7 (HEAD -> master, origin/master)
try first:
git clone https://github.com/pdoms/SHA256-PYTHON

diff --git a/Utils/helper.py b/Utils/helper.py
index 6f1ed5b..2eead81 100644
--- a/Utils/helper.py
+++ b/Utils/helper.py
@@ -1,5 +1,5 @@
-def translate(message):
-    charcodes = [ord(c) for c in message]
+def translate(message, encoding='utf8'):
+    charcodes = message.encode(encoding)
     bytes = []
     for char in charcodes:
         bytes.append(bin(char)[2:].zfill(8))
diff --git a/Utils/utils.py b/Utils/utils.py
index 35b0279..fcadfa7 100644
--- a/Utils/utils.py
+++ b/Utils/utils.py
@@ -3,17 +3,20 @@ def isTrue(x): return x == 1
 def if_(i, y, z): return y if isTrue(i) else z
 
 def and_(i, j): return if_(i, j, 0)
-def AND(i, j): return [and_(ia, ja) for ia, ja in zip(i,j)] 
+def AND(listi, listj): return [and_(i, j) for i, j in zip(listi,listj)]
 
 def not_(i): return if_(i, 0, 1)
-def NOT(i): return [not_(x) for x in i]
+def NOT(listi): return [not_(x) for x in listi]
 
+#return true if either i or j is true but not both at the same time:W
 def xor(i, j): return if_(i, not_(j), j)
-def XOR(i, j): return [xor(ia, ja) for ia, ja in zip(i, j)]
+def XOR(listi, listj): return [xor(i, j) for i, j in zip(listi, listj)]
 
+#if number of truth values is odd then return true
 def xorxor(i, j, l): return xor(i, xor(j, l))
-def XORXOR(i, j, l): return [xorxor(ia, ja, la) for ia, ja, la, in zip(i, j, l)]
+def XORXOR(listi, listj, listl): return [xorxor(i, j, l) for i, j, l, in zip(listi, listj, listl)]
 
+#get the majority of results, i.e., if 2 or more of three values are the same
 def maj(i,j,k): return max([i,j,], key=[i,j,k].count)
 
 def rotr(x, n): return x[-n:] + x[:-n]
diff --git a/hash.py b/hash.py
index 4d6e1b5..4e1ad14 100644
--- a/hash.py
+++ b/hash.py
@@ -3,18 +3,25 @@ from Utils.utils import *
 from Utils.constants import *
 
 
-def sha256(message): 
+def sha256(message):
+    #initialize values and constants
     k = initializer(K)
     h0, h1, h2, h3, h4, h5, h6, h7 = initializer(h_hex)
+    #message chunks
     chunks = preprocessMessage(message)
+    #main loop
     for chunk in chunks:
+        #message schedule
+        #create lists of 32 bit words (512 bits / 32 = 16 words)
         w = chunker(chunk, 32)
+        #extend length of chunk to 64 words, the remaining 48
+        #initialized with zeros
         for _ in range(48):
             w.append(32 * [0])
         for i in range(16, 64):
-            s0 = XORXOR(rotr(w[i-15], 7), rotr(w[i-15], 18), shr(w[i-15], 3) ) 
-            s1 = XORXOR(rotr(w[i-2], 17), rotr(w[i-2], 19), shr(w[i-2], 10))
-            w[i] = add(add(add(w[i-16], s0), w[i-7]), s1)
+            sigma0 = XORXOR(rotr(w[i-15], 7), rotr(w[i-15], 18), shr(w[i-15], 3) )
+            sigma1 = XORXOR(rotr(w[i-2], 17), rotr(w[i-2], 19), shr(w[i-2], 10))
+            w[i] = add(add(add(w[i-16], sigma0), w[i-7]), sigma1)
         a = h0
         b = h1
         c = h2
@@ -57,4 +64,4 @@ if __name__ == '__main__':
         input_message = input('Type or copy your message here: ')
         print('Your message: ', input_message)
         print('Hash: ', sha256(input_message))
-        verdict = input('Do you want to tryte another text? (y/n): ').lower()
\ No newline at end of file
+        verdict = input('Do you want to tryte another text? (y/n): ').lower()
