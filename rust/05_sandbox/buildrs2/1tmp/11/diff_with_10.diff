--- /home/user/sandbox/rust/05_sandbox/buildrs2/1tmp/10/build.rs	2024-04-17 16:05:08.679275112 +0200
+++ build.rs	2024-04-17 18:21:29.288981252 +0200
@@ -102,7 +102,7 @@ const TINFO_LIB_NAMES: &[&str] = if IS_W
     //
     //These are tried in order and first that links is selected:
     &["tinfow5", "tinfow", "tinfo"]
-    //doneFIXME: here ^, user can have in env. this TINFOW_NO_PKG_CONFIG=1 but not also TINFO_NO_PKG_CONFIG=1 which would cause seg fault on Gentoo because tinfo will be found&linked(instead of tinfow) with one or more of menuw,panelw,ncursesw eg. when doing example ex_5 (ie. menuw,ncursesw,tinfo(no w)); but on Fedora this ncursesw+tinfo(no w) makes sense, so we can't really guard against this (well maybe with target_os but what if they change in the future...) instead maybe print a warning if w and non-w are mixed(but only for tinfo is needed), even though it will be a false warning on Fedora, well maybe it won't be if we also check if env. var is set TINFOW_NO_PKG_CONFIG.
+    //doneFIXME: here ^, user can have in env. this TINFOW_NO_PKG_CONFIG=1 (but not also TINFO_NO_PKG_CONFIG=1) which would cause seg fault on Gentoo because tinfo will be found&linked(instead of tinfow) with one or more of menuw,panelw,ncursesw eg. when doing example ex_5 (ie. menuw,ncursesw,tinfo(no w)); but on Fedora this ncursesw+tinfo(no w) makes sense(because tinfo(no w) has both inside it, somehow, i guess), so we can't really guard against this (well maybe with target_os but what if they change in the future...) instead maybe print a warning if w and non-w are mixed(but only for tinfo is needed), even though it will be a false warning on Fedora, well maybe it won't be if we also check if env. var is set TINFOW_NO_PKG_CONFIG.
 } else {
     //no reason to ever fallback to tinfow here when not-wide!
     //Fedora/Gentoo has ncurses+tinfo
@@ -300,14 +300,29 @@ fn overwrite_file_contents(file_name: &s
     drop(file); //explicit file close, not needed since it's in a function now!
 }
 
+fn get_out_dir() -> &'static str {
+    use std::sync::OnceLock;
+    static LOCK: OnceLock<String> = OnceLock::new();
+
+    //OUT_DIR is set by cargo during build
+    const ENV_NAME_OF_OUT_DIR: &str = "OUT_DIR";
+    LOCK.get_or_init(|| {
+        env::var(ENV_NAME_OF_OUT_DIR).unwrap_or_else(|err| {
+            panic!(
+                "Cannot get env.var. '{}', reason: '{}'",
+                ENV_NAME_OF_OUT_DIR, err
+            )
+        })
+    })
+}
+
 /// Tries to see if linker can find/link with the named library.
 /// Uses ncurses lib searchdirs(if any found by pkg-config) to find that lib.
 /// This is mainly used when pkg-config is missing.
 /// Should still work if pkg-config exists though(except it will be missing the found link searchdirs and thus might fail? TODO: test this on NixOS, with NCURSES(W)_NO_PKG_CONFIG=1 env.var, for something like menu(w) or panel(w) )
 /// Returns true if linking succeeded, false otherwise.
 fn try_link(lib_name: &str, ncurses_lib: &Option<Library>) -> bool {
-    //OUT_DIR is set by cargo during build
-    let out_dir = env::var("OUT_DIR").expect("cannot get OUT_DIR");
+    let out_dir = get_out_dir();
 
     //We won't execute it though, so doesn't matter if it's .exe for Windows
     let out_bin_fname = format!("try_link_with_{}", lib_name);
@@ -321,20 +336,6 @@ fn try_link(lib_name: &str, ncurses_lib:
     let source_code = b"int main() { return 0; }";
     overwrite_file_contents(&out_src_full, source_code);
     //TODO: remove commented out code everywhere in build.rs
-    //    let mut file = File::create(&out_src_full).unwrap_or_else(|err| {
-    //        panic!(
-    //            "Couldn't create C file '{}', reason: '{}'",
-    //            out_src_full, err
-    //        )
-    //    });
-    //
-    //    file.write_all(source_code).unwrap_or_else(|err| {
-    //        panic!(
-    //            "Couldn't write to C file '{}', reason: '{}'",
-    //            out_src_full, err
-    //        )
-    //    });
-    //    drop(file); //explicit file close
 
     let build = cc::Build::new();
     let mut linker_searchdir_args: Vec<String> = Vec::new();
@@ -420,7 +421,7 @@ fn gen_rs(
     lib_name: &str,
 ) {
     println!("cargo:rerun-if-changed={}", source_c_file);
-    let out_dir = env::var("OUT_DIR").expect("cannot get OUT_DIR");
+    let out_dir = get_out_dir();
     #[cfg(windows)]
     let out_bin_fname = format!("{}.exe", out_bin_fname); //shadowed
     let bin_full = Path::new(&out_dir)
@@ -473,62 +474,8 @@ fn gen_rs(
     //Execute the compiled binary, panicking if non-zero exit code, else compilation will fail
     //later with things like: "error[E0432]: unresolved import `constants::TRUE`" in the case of
     //generating raw_constants.rs which would be empty due to 'genconstants' having failed with exit
-    //code 1
-    let output: std::process::Output = Command::new(&bin_full).output_or_panic(); // doneTODO: maybe make this an extension trait and dedup code
-                                                                                  //        .unwrap_or_else(|err| {
-                                                                                  //            //doneTODO: this should be same as .status_or_panic() basically; or maybe not, since needs
-                                                                                  //            //different message and less args; but for deduppage sould do.
-                                                                                  //            panic!(
-                                                                                  //                "!!! Attempting to execute '{}' failed, reason: '{}'",
-                                                                                  //                bin_full, err
-                                                                                  //            )
-                                                                                  //        });
-
-    // TODO: dedup this whole block with the one from check_chtype_size
-    // test this with: `$ TERM=foo cargo build`
-    let show_stdout_stderr = || {
-        //XXX: presumably eprintln! and std::io::stderr().write_all().unwrap() write to same stderr
-        //stream and both would panic if some error would happen when writing to it!
-        eprintln!("But here's its stdout&stderr:");
-        eprintln!("|||stdout start|||");
-        //Preserve stdout/stderr bytes, instead of lossily convert them to utf-8 before showing them.
-        //show stdout of executed binary, on stderr
-        std::io::stderr().write_all(&output.stdout).unwrap();
-        eprintln!("\n|||stdout end||| |||stderr start|||");
-        //show stderr of executed binary, on stderr
-        std::io::stderr().write_all(&output.stderr).unwrap();
-        eprintln!("\n|||stderr end|||");
-    };
-    let and_panic = || -> ! {
-        panic!(
-            "Due to the above-reported error while executing '{}'.",
-            bin_full
-        );
-    };
-
-    let exit_code = output.status.code().unwrap_or_else(|| {
-        //we get here if it segfaults(signal 11), so if exited due to signal
-        //but unsure if we get here for any other reasons!
-        //To test this branch uncomment a segfault line early in src/genconstants.c then `cargo build`
-        eprintln!(
-            "!!! Execution of '{}' failed, likely killed by signal! Maybe check 'dmesg' for the word \"segfault\" or \"{}\".",
-            bin_full, out_bin_fname
-            );
-        show_stdout_stderr();
-        and_panic();
-    });
-    if 0 != exit_code {
-        eprintln!(
-            "!!! Execution of '{}' failed with exit code '{}'",
-            bin_full, exit_code
-        );
-        show_stdout_stderr();
-        eprintln!(
-            // this msg can't be part of the (future)extension trait impl:
-            "!! Maybe you need to try a different value for the TERM environment variable !!"
-        );
-        and_panic();
-    }
+    //code 1 because env.var. TERM=a_terminal_not_in_term_database
+    let output: std::process::Output = Command::new(&bin_full).output_success_or_panic();
 
     //Write the output from executing the binary into a new rust source file .rs
     //That .rs file is later used outside of this build.rs, in the normal build
@@ -538,25 +485,12 @@ fn gen_rs(
         .to_string();
     overwrite_file_contents(&gen_rust_file_full_path, &output.stdout);
     //we ignore stderr.
-
-    //    let mut file = File::create(&gen_rust_file_full_path).unwrap_or_else(|err| {
-    //        panic!(
-    //            "Couldn't create rust file '{}', reason: '{}'",
-    //            gen_rust_file_full_path, err
-    //        )
-    //    });
-    //
-    //    file.write_all(&output.stdout).unwrap_or_else(|err| {
-    //        panic!(
-    //            "Couldn't write to rust file '{}', reason: '{}'",
-    //            gen_rust_file_full_path, err
-    //        )
-    //    });
+    //we don't delete this file because it's used to compile the rest of the crate.
 }
 
 fn check_chtype_size(ncurses_lib: &Option<Library>) {
-    let out_dir = env::var("OUT_DIR").expect("cannot get OUT_DIR");
-    let src = Path::new(&out_dir)
+    let out_dir = get_out_dir();
+    let src_full = Path::new(&out_dir)
         .join("chtype_size.c")
         .display()
         .to_string();
@@ -567,7 +501,7 @@ fn check_chtype_size(ncurses_lib: &Optio
     };
     let bin_full = Path::new(&out_dir).join(bin_name).display().to_string();
 
-    let contents = br#"
+    let contents = br#"// autogenerated by build.rs
 #include <assert.h>
 #include <limits.h>
 #include <stdio.h>
@@ -584,17 +518,12 @@ int main(void)
     }
 
 #if defined(NCURSES_MOUSE_VERSION) && NCURSES_MOUSE_VERSION == 1
-	puts("cargo:rustc-cfg=feature=\"mouse_v1\"");
+    puts("cargo:rustc-cfg=feature=\"mouse_v1\"");
 #endif
     return 0;
 }
-    "#;
-    overwrite_file_contents(&src, contents);
-    //    let mut fp = File::create(&src)
-    //        .unwrap_or_else(|err| panic!("cannot create '{}', reason: '{}'", src, err));
-    //fp.write_all(
-    //    .unwrap_or_else(|err| panic!("cannot write into file '{}', reason: '{}'", src, err));
-    //    drop(fp); //explicit file close (flush)
+"#;
+    overwrite_file_contents(&src_full, contents);
 
     let mut build = cc::Build::new();
     if let Some(lib) = ncurses_lib {
@@ -611,37 +540,22 @@ int main(void)
         .expect("Failed Build::try_get_compiler");
     let mut command = compiler.to_command();
 
-    command.arg("-o").arg_checked(&bin_full).arg_checked(&src);
+    command
+        .arg("-o")
+        .arg_checked(&bin_full)
+        .arg_checked(&src_full);
     command.success_or_panic(); //runs compiler
 
-    let features = Command::new(&bin_full).output_or_panic(); // kindadoneTODO: maybe make this an extension trait and dedup code (see up, it's fresh-er)
-                                                              //.unwrap_or_else(|err| panic!("Executing '{}' failed, reason: '{}'", bin_full, err));
-    let exit_code = features.status.code().unwrap_or_else(|| {
-        panic!(
-            "Execution of '{}' failed, possibly killed by signal? stderr is: '{}'",
-            bin_full,
-            String::from_utf8_lossy(&features.stderr)
-        )
-    });
-    assert_eq!(
-        exit_code,
-        0,
-        "Executing '{}' failed with exit code '{}',\n|||stdout start|||\n{}\n|||stdout end||| |||stderr start|||\n{}\n|||stderr end|||",
-        bin_full,
-        exit_code,
-        String::from_utf8_lossy(&features.stdout),
-        String::from_utf8_lossy(&features.stderr),
-    );
-    //FIXME: reuse ^ code from gen_rs() but without dup-ing
+    let features = Command::new(&bin_full).output_success_or_panic();
 
     //for cargo to consume
     print!("{}", String::from_utf8_lossy(&features.stdout));
 
     if DELETE_GENERATEDS {
-        std::fs::remove_file(&src).unwrap_or_else(|err| {
+        std::fs::remove_file(&src_full).unwrap_or_else(|err| {
             panic!(
                 "Cannot delete generated C file '{}', reason: '{}'",
-                src, err
+                src_full, err
             )
         });
         std::fs::remove_file(&bin_full).unwrap_or_else(|err| {
@@ -715,9 +629,9 @@ fn get_ncurses_lib_name(ncurses_lib: &Op
     lib_name
 }
 
-trait MyOutput {}
-
-impl MyOutput for std::process::Output {}
+//trait MyOutput {}
+//
+//impl MyOutput for std::process::Output {}
 
 trait MyExitStatus {
     fn success_or_panic(self) -> ExitStatus;
@@ -732,10 +646,10 @@ impl MyExitStatus for std::process::Exit
             if let Some(code) = self.code() {
                 how = format!(" with exit code {}.", code);
             } else {
-                how = ", was it terminated by a signal?".to_string();
+                how = ", was it terminated by a signal?!".to_string();
             }
             panic!(
-                "Compiler failed{} Is ncurses installed? \
+                "!!! Compiler failed{} Is ncurses installed? \
         pkg-config or pkgconf too? \
         it's 'ncurses-devel' on Fedora; \
         run `nix-shell` first, on NixOS. \
@@ -749,10 +663,12 @@ impl MyExitStatus for std::process::Exit
 // Define an extension trait for Command
 trait MyCompilerCommand {
     fn output_or_panic(&mut self) -> std::process::Output;
+    fn output_success_or_panic(&mut self) -> std::process::Output;
     fn success_or_panic(&mut self) -> ExitStatus;
     //fn success_or_else<F: FnOnce(ExitStatus) -> ExitStatus>(&mut self, op: F) -> ExitStatus;
     fn status_or_panic(&mut self) -> ExitStatus;
     fn show_what_will_run(&mut self) -> &mut Self;
+    fn get_program_or_panic(&self) -> &str;
     fn get_what_will_run(&self) -> (String, usize, String);
     fn assert_no_nul_in_args(&mut self) -> &mut Self;
     /// Panics if arg has \0 in it.
@@ -782,40 +698,78 @@ fn has_null_byte<S: AsRef<OsStr>>(arg: S
 const REPLACEMENT_FOR_ARG_THAT_HAS_NUL: &str = "<string-with-nul>";
 // Implement the extension trait for Command
 impl MyCompilerCommand for std::process::Command {
+    ///you get Output struct but exit code may not have been 0 !
     fn output_or_panic(&mut self) -> std::process::Output {
         self.output().unwrap_or_else(|err| {
-            //doneTODO: this should be same as .status_or_panic() basically; or maybe not, since needs
-            //different message and less args; but for deduppage sould do.
-            //            panic!(
-            //                "!!! Attempting to execute '{}' failed, reason: '{}'",
-            //                bin_full, err
-            //            )
             self.panic(err, "generated bin"); //TODO: let caller provide this
         })
     }
+    ///you get Output struct only if exit code was 0, else panics apropriately
+    fn output_success_or_panic(&mut self) -> std::process::Output {
+        let output = self.output_or_panic();
+        // test this with: `$ TERM=foo cargo build`
+        let show_stdout_stderr = || {
+            //XXX: presumably eprintln! and std::io::stderr().write_all().unwrap() write to same stderr
+            //stream and both would panic if some error would happen when writing to it!
+            eprintln!("But here's its stdout&stderr:");
+            eprintln!("|||stdout start|||");
+            //Preserve stdout/stderr bytes, instead of lossily convert them to utf-8 before showing them.
+            //show stdout of executed binary, on stderr
+            std::io::stderr().write_all(&output.stdout).unwrap();
+            eprintln!("\n|||stdout end||| |||stderr start|||");
+            //show stderr of executed binary, on stderr
+            std::io::stderr().write_all(&output.stderr).unwrap();
+            eprintln!("\n|||stderr end|||");
+        };
+        let prog = self.get_program_or_panic();
+        let and_panic = || -> ! {
+            panic!(
+                "Due to the above-reported error while executing '{}'.",
+                //self.get_program_or_panic()
+                prog
+            );
+        };
+
+        let exit_code = output.status.code().unwrap_or_else(|| {
+            //we get here if it segfaults(signal 11), so if exited due to signal
+            //but unsure if we get here for any other reasons!
+            //To test this branch uncomment a segfault line early in src/genconstants.c then `cargo build`
+
+            let basename=Path::new(prog).file_name().unwrap_or_else(|| {
+                eprintln!("Couldn't get basename for '{}'", prog);
+                OsStr::new("") //refusing to panic over this
+            });
+            let basename=basename.to_str().unwrap_or_else(|| {
+                eprintln!("Couldn't convert OsStr '{:?}' to &str", basename);
+                "" //refusing to panic over this
+            });
+            eprintln!(
+                "!!! Execution of '{}' failed, likely killed by signal! Maybe check 'dmesg' for the word \"segfault\" or \"{}\". We can't know here, which signal happened.",
+                prog, basename
+                );
+            show_stdout_stderr();
+            and_panic();
+        });
+        if 0 != exit_code {
+            eprintln!(
+                "!!! Execution of '{}' failed with exit code '{}'",
+                prog, exit_code
+            );
+            show_stdout_stderr();
+            eprintln!(
+                // this msg can't be part of the (future)extension trait impl:
+                "!! Maybe you need to try a different value for the TERM environment variable !!"
+            );
+            and_panic();
+        } else {
+            return output;
+        }
+    }
+
     /// you can't use an arg value "<string-with-nul>", or this will panic.
     fn success_or_panic(&mut self) -> ExitStatus {
         let exit_status: ExitStatus = self.status_or_panic().success_or_panic();
         exit_status
-        //        //TODO: make this below part of ExitStatus (ie. extension trait) so I can use it on other Command(s)
-        //        if exit_status.success() {
-        //            exit_status
-        //        } else {
-        //            let how: String;
-        //            if let Some(code) = exit_status.code() {
-        //                how = format!(" with exit code {}", code);
-        //            } else {
-        //                how = ", was terminated by a signal".to_string();
-        //            }
-        //            panic!(
-        //                "Compiler failed{}. Is ncurses installed? \
-        //        pkg-config or pkgconf too? \
-        //        it's 'ncurses-devel' on Fedora; \
-        //        run `nix-shell` first, on NixOS. \
-        //        Or maybe it failed for different reasons which are seen in the errored output above.",
-        //                how
-        //            )
-        //        }
     }
     //note: can't override arg/args because they're not part of a Trait in Command
     //so would've to wrap Command in my own struct for that. This would've ensured
@@ -864,11 +818,16 @@ impl MyCompilerCommand for std::process:
         }
         self
     }
-    fn get_what_will_run(&self) -> (String, usize, String) {
+    fn get_program_or_panic(&self) -> &str {
         let program = self.get_program();
         let p_prog = program
             .to_str()
             .unwrap_or_else(|| panic!("Compiler executable {:?} isn't valid rust string", program));
+        //TODO: "Compiler" is too specific here, could be we're running just a bin we created!
+        p_prog
+    }
+    fn get_what_will_run(&self) -> (String, usize, String) {
+        let p_prog = self.get_program_or_panic();
         let args = self.get_args();
         let how_many_args: usize = args.len();
         let formatted_args: String = args
@@ -917,27 +876,18 @@ impl MyCompilerCommand for std::process:
             .status()
             .unwrap_or_else(|err| {
                 self.panic(err, "compilation"); //TODO: let caller provide this?!
-                                                //                let (p_prog, how_many_args, formatted_args) = self.get_what_will_run();
-                                                //                panic!(
-                                                //                    "Failed to run compilation command '{}' with '{}' args: '{}', reason: '{}'",
-                                                //                    p_prog, how_many_args, formatted_args, err
-                                                //                )
             })
     }
     fn panic<T: std::fmt::Display>(&mut self, err: T, what_type_of_command: &str) -> ! {
         let (p_prog, how_many_args, formatted_args) = self.get_what_will_run();
+        let extra_space = if what_type_of_command.is_empty() {
+            ""
+        } else {
+            " "
+        };
         panic!(
             "Failed to run {}{}command '{}' with '{}' args: '{}', reason: '{}'",
-            what_type_of_command,
-            if what_type_of_command.is_empty() {
-                ""
-            } else {
-                " "
-            },
-            p_prog,
-            how_many_args,
-            formatted_args,
-            err
+            what_type_of_command, extra_space, p_prog, how_many_args, formatted_args, err
         )
     }
     fn show_what_will_run(&mut self) -> &mut Self {
