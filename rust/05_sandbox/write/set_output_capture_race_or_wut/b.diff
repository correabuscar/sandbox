Index: /var/tmp/portage/dev-lang/rust-1.76.0-r1/work/rustc-1.76.0-src/library/std/src/io/stdio.rs
===================================================================
--- .orig/var/tmp/portage/dev-lang/rust-1.76.0-r1/work/rustc-1.76.0-src/library/std/src/io/stdio.rs
+++ /var/tmp/portage/dev-lang/rust-1.76.0-r1/work/rustc-1.76.0-src/library/std/src/io/stdio.rs
@@ -1012,6 +1012,39 @@ pub fn try_set_output_capture(
         return Ok(None);
     }
     OUTPUT_CAPTURE_USED.store(true, Ordering::Relaxed);
+    //crate::thread::sleep(crate::time::Duration::from_secs(2));
+    OUTPUT_CAPTURE.try_with(move |slot| slot.replace(sink))
+}
+
+#[unstable(
+    feature = "internal_output_capture",
+    reason = "this function is meant for use in the test crate \
+        and may disappear in the future",
+    issue = "none"
+)]
+#[doc(hidden)]
+pub fn set_output_capture2(sink: Option<LocalStream>, delay: crate::time::Duration) -> Option<LocalStream> {
+    try_set_output_capture2(sink, delay).expect(
+        "cannot access a Thread Local Storage value \
+         during or after destruction",
+    )
+}
+#[unstable(
+    feature = "internal_output_capture",
+    reason = "this function is meant for use in the test crate \
+    and may disappear in the future",
+    issue = "none"
+)]
+#[doc(hidden)]
+pub fn try_set_output_capture2(
+    sink: Option<LocalStream>, delay: crate::time::Duration,
+) -> Result<Option<LocalStream>, AccessError> {
+    if sink.is_none() && !OUTPUT_CAPTURE_USED.load(Ordering::Relaxed) {
+        // OUTPUT_CAPTURE is definitely None since OUTPUT_CAPTURE_USED is false.
+        return Ok(None);
+    }
+    OUTPUT_CAPTURE_USED.store(true, Ordering::Relaxed);
+    crate::thread::sleep(delay);
     OUTPUT_CAPTURE.try_with(move |slot| slot.replace(sink))
 }
 
Index: /var/tmp/portage/dev-lang/rust-1.76.0-r1/work/rustc-1.76.0-src/library/std/src/io/mod.rs
===================================================================
--- .orig/var/tmp/portage/dev-lang/rust-1.76.0-r1/work/rustc-1.76.0-src/library/std/src/io/mod.rs
+++ /var/tmp/portage/dev-lang/rust-1.76.0-r1/work/rustc-1.76.0-src/library/std/src/io/mod.rs
@@ -319,6 +319,9 @@ pub use self::stdio::{_eprint, _print};
 #[unstable(feature = "internal_output_capture", issue = "none")]
 #[doc(no_inline, hidden)]
 pub use self::stdio::{set_output_capture, try_set_output_capture};
+#[unstable(feature = "internal_output_capture", issue = "none")]
+#[doc(no_inline, hidden)]
+pub use self::stdio::{set_output_capture2, try_set_output_capture2};
 #[stable(feature = "rust1", since = "1.0.0")]
 pub use self::{
     buffered::{BufReader, BufWriter, IntoInnerError, LineWriter},
