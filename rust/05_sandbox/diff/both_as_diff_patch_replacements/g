#!/usr/bin/env -S PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/opt/bin:${PATH}" bash

set -e
#export RUST_BACKTRACE=1
export RUST_BACKTRACE=0
export DEBUG=1
#unset RUST_BACKTRACE
#cargo clean #needed else won't detect same rustc version changes because it doesn't look at exe timestamp
cargo build
#set -vx
set +e
exe="$(realpath -- ./target/debug/both_as_diff_patch_replacements)"
ln -frs "$exe" ./diff
ln -frs "$exe" ./patch
ln -frs "$exe" ./test_drops_and_exit_code_on_panic
./test_drops_and_exit_code_on_panic ; ec="$?"
if test "$ec" != "82"; then
  tput setaf 1 >&2
  echo "Failed, exit code 82, not '$ec', was expected." >&2
  tput sgr0 >&2
  exit "$ec"
else
  tput setaf 2 >&2
  echo "That worked, exit code '$ec', continuing..." >&2
  tput sgr0 >&2
fi
diff="$(realpath --no-symlinks -- ./diff)"
gnudiff="/usr/bin/diff"
patch="$(realpath --no-symlinks -- ./patch)"
#gnupatch="/usr/bin/patch" #unused
pushd "../diff"
"$diff" -up --label original --label modified -- workspace.rs.original_real workspace.rs.PATCHED_real > /tmp/le.patch  ; ec="$?"
if test "$ec" != 1; then
  tput setaf 1 >&2
  echo "$diff failed with non-1 exit code '$ec'" >&2
  tput sgr0 >&2
  exit "$ec"
fi
"$gnudiff" -qup good_way.patch /tmp/le.patch; ec1="$?"
"$diff" -qup good_way.patch /tmp/le.patch; ec="$?"
if test "$ec" != "$ec1"; then
  tput setaf 1 >&2
  echo "Exit code for gnudiff($ec1) aka '$gnudiff' vs our diffy diff($ec) aka '$diff' are different! Should be same!" >&2
  tput sgr0 >&2
  exit 2
fi
if test "$ec" == "0"; then
  # it's same as good patch
  tput setaf 2 >&2
  echo "The generated patch is correct!" >&2
  tput sgr0 >&2
else
  "$gnudiff" -qup bad.patch /tmp/le.patch; ec1="$?"
  "$diff" -qup bad.patch /tmp/le.patch; ec="$?"
  if test "$ec" != "$ec1"; then
    tput setaf 1 >&2
    echo "Exit code for gnudiff($ec1) aka '$gnudiff' vs our diffy diff($ec) aka '$diff' are different! Should be same!" >&2
    tput sgr0 >&2
    exit 2
  fi
  if test "$ec" == "0"; then
    #it's equal to bad patch
    tput setaf 1 >&2
    echo "The generated patch is NOT correct!" >&2
    tput sgr0 >&2
    exit 2
  else
    #different than expected bad and expected good, so it's a new thing!
    tput setaf 3 >&2
    echo "The generated patch is something NEW, different from expected correct and expected incorrect!" >&2
    tput sgr0 >&2
    cat /tmp/le.patch
  fi
fi
#exit 0
popd
pushd "../patch"

#TODO: try with `-o output` and see if `> output`  has same output file in both cases! and for --unambiguous too!

"$patch" --ambiguous workspace.rs.original /tmp/le.patch > workspace.rs.FRESHLY_PATCHED; ec="$?"
if test "$ec" != "0"; then
  tput setaf 1 >&2
  echo "The generated patch should not have failed to apply on the original source! exit code '$ec'." >&2
  tput sgr0 >&2
  exit "$ec"
fi
"$patch" --ambiguous workspace.rs.FRESHLY_PATCHED /tmp/le.patch > /tmp/workspace.rs.FRESHLY_PATCHED_AGAIN; ec="$?"
if test "$ec" == 0; then
  tput setaf 1 >&2
  echo "That's a fail, it shouldn't have applied again! The patch itself is ambiguous!" >&2
  tput sgr0 >&2
  "$patch" --ambiguous workspace.rs.FRESHLY_PATCHED_AGAIN /tmp/le.patch > /tmp/workspace.rs.FRESHLY_PATCHED_AGAIN2; ec="$?"
  if test "$ec" == 0; then
    tput setaf 1 >&2
    echo "That's a fail, it shouldn't have applied again! The patch itself is ambiguous!" >&2
    echo "Now let's try again but this time with unambiguous apply!" >&2
  else
    if test "$ec" == "1"; then
      tput setaf 2 >&2
      echo "That's correct! Patch failed to apply again in a wrong place!" >&2
    else
      tput setaf 1 >&2
      echo "Unexpected exit code, '$ec'" >&2
      tput sgr0
      exit "$ec"
    fi
  fi

  #cargo run workspace.rs.FRESHLY_PATCHED_AGAIN2 le.patch workspace.rs.FRESHLY_PATCHED_AGAIN3
  #^ that one finally fails!
elif test "$ec" == 1; then
  tput setaf 2 >&2
  echo "That's correct! Patch failed to apply again in a wrong place!" >&2
  echo "Now let's try again but this time with an ambiguous patch and an unambiguous apply!" >&2
elif test "$ec" == 2; then
  tput setaf 1 >&2
  echo "patching failed due to encountering trouble aka exit code '$ec'." >&2
  tput sgr0
  exit "$ec"
else
  tput setaf 1 >&2
  echo "Unexpected exit code '$ec' from 'patch' executable, this is bad coding!" >&2
  tput sgr0
  exit "$ec"
fi
tput sgr0

"$patch" --unambiguous workspace.rs.original bad.patch > /tmp/workspace.rs.FRESHLY_PATCHED ; ec="$?"
if test "$ec" == 1; then
  tput setaf 2 >&2
  echo "That's correct, applying an ambiguous patch unambiguously, failed as it should!" >&2
  tput sgr0
else
  tput setaf 1 >&2
  if test "$ec" == 0; then
    echo "Incorrect, unambiguously applying the ambiguous patch should not have succeeded! exit code:$ec" >&2
  else
    echo "Incorrect, exit code: '$ec' is neither 0 nor 1" >&2
  fi
  tput sgr0
  exit "$ec"
fi

empty_lines="$(grep -c '^$' -- /tmp/le.patch)"
if test "$empty_lines" -gt "0"; then
  tput setaf 1 >&2
  echo "Patch contains empty lines, which likely means empty context lines which should be prefixed by a space" >&2
  tput sgr0
  exit 1
else
  tput setaf 2 >&2
  echo "Patch correctly contains space-prefixed empty lines!" >&2
  tput sgr0
fi

echo "All done."
exit 0
